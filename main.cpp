#include <windows.h>

#include <filesystem>
#include <stdexcept>

#include "args.hpp"
#include "config.hpp"
#include "logger.hpp"
#include "runner.hpp"

#define VERSION "0.3 Alpha"

namespace fs = std::filesystem;

#ifdef _WIN32
#include <windows.h>

fs::path getExecutablePath() {
    wchar_t buffer[MAX_PATH];
    DWORD len = GetModuleFileNameW(nullptr, buffer, MAX_PATH);
    if (len == 0) throw std::runtime_error("GetModuleFileNameW failed");
    return fs::path(buffer).parent_path();
}
#else
#include <unistd.h>
fs::path getExecutablePath() {
    char buffer[4096];
    ssize_t len = readlink("/proc/self/exe", buffer, sizeof(buffer) - 1);
    if (len == -1) throw std::runtime_error("readlink(/proc/self/exe) failed");
    buffer[len] = '\0';
    return fs::path(buffer).parent_path();
}
#endif

int main(int argc, char* argv[]) {
    std::string script;

    if (argc >= 2) {
        std::string command = argv[1];
        if (command == "r" || command == "run") {
            if (argc < 3) {
                logMessage(FAULT, " ");
                return 1;
            }
            script = argv[2];
        }
        else if (command == "v" || command == "version") {
            logMessage(INFO, std::string("CRUN ") + VERSION, true, "üß†");
            return 0;
        }
        else if (command == "h" || command == "help") {
            logMessage(INFO, "CRUN ‚Äî –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫ C/C++ –ø—Ä–æ–µ–∫—Ç–æ–≤", true, "üõ†Ô∏è");

            logMessage(INFO, "–ö–æ–º–∞–Ω–¥—ã:", true, "üìå");
            logMessageA(INFO, "    run <script>         ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –∏–∑ crun.json", true);
            logMessageA(INFO, "    init                 ‚Äî —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω crun.json", true);
            logMessageA(INFO, "    version              ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é", true);
            logMessageA(INFO, "    help                 ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É", true);
            logMessageA(INFO, "    <files...> <options> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É", true);

            logMessage(INFO, "–§–ª–∞–≥–∏:", true, "üè∑Ô∏è");
            logMessageA(INFO, "    -c, -clear        ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º", true);
            logMessageA(INFO, "    -r, -run          ‚Äî –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏", true);
            logMessageA(INFO, "    -b, -build        ‚Äî —Ç–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞", true);
            logMessageA(INFO, "    -gcc              ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gcc –≤–º–µ—Å—Ç–æ g++", true);
            logMessageA(INFO, "    -g++              ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å g++", true);
            logMessageA(INFO, "    -bd, -buildDir    ‚Äî —É–∫–∞–∑–∞—Ç—å –ø–∞–ø–∫—É —Å–±–æ—Ä–∫–∏", true);
            logMessageA(INFO, "    -I <dir>          ‚Äî –¥–æ–±–∞–≤–∏—Ç—å include –ø–∞–ø–∫—É", true);
            logMessageA(INFO, "    -L <dir>          ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏", true);
            logMessageA(INFO, "    -l <lib>          ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É", true);
            logMessageA(INFO, "    -F <folder>       ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏", true);  // —É–±—Ä–∞—Ç—å
            logMessageA(INFO, "    -f <file>         ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", true);                 // —É–±—Ä–∞—Ç—å
            logMessageA(INFO, "    -o <options...>   ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞", true);
            logMessageA(INFO, "    -- <...>          ‚Äî –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞", true);
            return 0;
        }
    }

    fs::path localPath = fs::absolute("./.crun/config.json");

    if (readConfig(localPath.string(), script)) {
        fs::path globalPath = fs::absolute(getExecutablePath() / ".crun/config.json");
        if (!fs::equivalent(localPath, globalPath)) readConfig(globalPath.string(), script);
    }

    if (!arguments.scriptToRun.empty()) { return runScript(arguments.scriptToRun); }

    parseArgs(argc - 1, argv + 1);

    run();

    return 0;
}
